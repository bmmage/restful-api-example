<?php

namespace Tests\Feature;

use App\User;
use App\Product;
use Tests\TestCase;
use Illuminate\Foundation\Testing\DatabaseTransactions;

class ProductTest extends TestCase
{
    use DatabaseTransactions;

    /**
     * Authorization Token required for api routes
     * @var
     */
    protected $bearerToken;

    /**
     * Authorization Token required for api routes for Admins
     * @var
     */
    protected $adminToken;

    /**
     * Test product
     * @var
     */
    protected $testProduct;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->testProduct = Product::first();
    }

    /**
     * A basic test example.
     *
     * @return void
     */
    public function testGetAllProducts()
    {
        $response = $this->get('/api/products', [
            'Authorization' => 'Bearer ' . $this->bearerToken
        ]);
        $response->assertStatus(200);
        $response->assertJsonStructure([
            '*' => [
                'id',
                'name',
                'description',
                'price',
                'image_url',
                'image_template',
            ]
        ]);
    }

    public function testGetAProduct()
    {
        $response = $this->get('/api/products/' . $this->testProduct->id, $this->authHeader($this->bearerToken));

        $response->assertStatus(200);
        $response->assertJsonStructure([
            'id',
            'name',
            'description',
            'price',
            'image_url',
            'image_template',
        ]);
        $response->assertJson(['id' => $this->testProduct->id, 'name' => $this->testProduct->name]);
    }

    public function testDeleteAProduct()
    {
        $response = $this->delete('/api/products/' . $this->testProduct->id, [], $this->authHeader($this->adminToken));
        $response->assertStatus(204);
    }


    public function testUpdateAProduct()
    {
        $putData = [
            'name' => 'Foo'.time(),
            'description' => 'This foo',
            'price' => '123',
        ];
        $response = $this->put('/api/products/' . $this->testProduct->id, $putData, $this->authHeader($this->adminToken));
        $putData['id'] = $this->testProduct->id;
        $response->assertStatus(200);
        $response->assertJson($putData);
    }

    public function testWillNotDeleteAProductWithNonAdminUser()
    {
        $response = $this->delete('/api/products/' . $this->testProduct->id, [], [
            'Authorization' => 'Bearer ' .  $this->bearerToken
        ]);
        $response->assertStatus(401);
    }

    public function testWillNotUpdateAProductWithNonAdminUser()
    {
        $putData = [
            'name' => 'Foo'.time(),
            'description' => 'This foo',
            'price' => '123',
        ];
        $response = $this->put('/api/products/' . $this->testProduct->id, $putData, $this->authHeader($this->bearerToken));
        $response->assertStatus(401);
    }
}
