<?php

namespace Tests\Feature;

use App\User;
use App\Product;
use Tests\TestCase;
use Illuminate\Foundation\Testing\DatabaseTransactions;

class UserProductTest extends TestCase
{
    use DatabaseTransactions;

    /**
     * Authorization Token required for api routes
     * @var
     */
    protected $bearerToken;

    /**
     * Authorization Token required for api routes for Admins
     * @var
     */
    protected $adminToken;

    /**
     * Authorization Token required for api routes for Admins
     * @var
     */
    protected $adminUser;

    /**
     * Authorization Token required for api routes for Admins
     * @var
     */
    protected $normalUser;

    /**
     * Test product
     * @var
     */
    protected $testProduct;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->normalUser = User::first();
        $this->adminUser = User::whereEmail('admin@user.com')->first();
        $this->bearerToken = $this->getBearerToken($this->normalUser);
        $this->adminToken = $this->getBearerToken($this->adminUser);
    }

    /**
     * A basic test example.
     *
     * @return void
     */
    public function testGetAllProductsForUser()
    {
        $response = $this->get(
            "/api/user/{$this->normalUser->id}/products",
            $this->authHeader($this->bearerToken)
        );
        $response->assertStatus(200);
        $response->assertJsonStructure([
            '*' => [
                'id',
                'name',
                'description',
                'price',
                'image_url',
                'thumbnail_url',
            ]
        ]);
    }

    /**
     * A basic test example.
     *
     * @return void
     */
    public function testAttachAProductToAUser()
    {
        $product = Product::all()->whereNotIn('id', $this->normalUser->products->pluck('id'))->random();

        $response = $this->post(
            "/api/user/{$this->normalUser->id}/products",
            [
                'product_id' => $product->id
            ],
            $this->authHeader($this->bearerToken)
        );
        $response->assertStatus(200);
        $response->assertJsonStructure([
            '*' => [
                'id',
                'name',
                'description',
                'price',
                'image_url',
                'thumbnail_url',
            ]
        ]);
        $response->assertJson([
            [
                'name' => $product->name,
                'description' => $product->description,
                'price' => $product->price,
            ]
        ]);
    }

    /**
     * A basic test example.
     *
     * @return void
     */
    public function testDoNotAttachAProductToAUserIfNotAuthorized()
    {
        $product = Product::all()->whereNotIn('id', $this->normalUser->products->pluck('id'))->random();

        $response = $this->post(
            "/api/user/" . User::where('id', '<>', $this->normalUser->id)->first()->id . "/products",
            [
                'product_id' => $product->id
            ],
            $this->authHeader($this->bearerToken)
        );
        $response->assertStatus(401);
    }

    /**
     * A basic test example.
     *
     * @return void
     */
    public function testAttachAProductToAUserIfRequestingUserHadAdminAccessControl()
    {
        $product = Product::all()->whereNotIn('id', $this->normalUser->products->pluck('id'))->random();

        $response = $this->post(
            "/api/user/{$this->normalUser->id}/products",
            [
                'product_id' => $product->id
            ],
            $this->authHeader($this->adminToken)
        );
        $response->assertStatus(200);
    }

    /**
     * A basic test example.
     *
     * @return void
     */
    public function testDetachAProductFromAUser()
    {
        $removeProduct = $this->normalUser->products->random();

        $response = $this->delete(
            "/api/user/{$this->normalUser->id}/products/{$removeProduct->id}",
            [],
            $this->authHeader($this->bearerToken)
        );
        $response->assertStatus(204);
        $this->assertDatabaseMissing(
            'product_user', ['user_id' => $this->normalUser->id, 'product_id' => $removeProduct->id]
        );
    }

    /**
     * A basic test example.
     *
     * @return void
     */
    public function testDetachAProductFromAUserIfRequestingUserHadAdminAccessControl()
    {
        $removeProduct = $this->normalUser->products->random();

        $response = $this->delete(
            "/api/user/{$this->normalUser->id}/products/{$removeProduct->id}",
            [],
            $this->authHeader($this->adminToken)
        );
        $response->assertStatus(204);
        $this->assertDatabaseMissing(
            'product_user', ['user_id' => $this->normalUser->id, 'product_id' => $removeProduct->id]
        );
    }
}
